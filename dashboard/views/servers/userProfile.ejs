<%- include('../partials/header') %>

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  <!-- Encabezado de la página -->
  <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-8">
    <div>
      <h1 class="text-2xl font-bold text-gray-900"><%= profile ? 'Mi Perfil en ' : 'Crear Perfil en ' %><%= guild.name %></h1>
      <p class="mt-2 text-sm text-gray-500">
        <% if (profile) { %>
          Personaliza tu perfil de roleplay en este servidor.
        <% } else { %>
          Crea tu personaje de roleplay para este servidor.
        <% } %>
      </p>
    </div>
    <div class="mt-4 md:mt-0 flex gap-2">
      <a href="/servers" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        <i class="fas fa-arrow-left mr-2"></i>Mis Servidores
      </a>
    </div>
  </div>

  <!-- Estado de éxito o error -->
  <% if (locals.success) { %>
    <div class="bg-green-50 border-l-4 border-green-400 p-4 mb-6">
      <div class="flex">
        <div class="flex-shrink-0">
          <i class="fas fa-check-circle text-green-400"></i>
        </div>
        <div class="ml-3">
          <p class="text-sm text-green-700">Tu perfil se ha guardado correctamente.</p>
        </div>
      </div>
    </div>
  <% } %>
  
  <% if (locals.error) { %>
    <div class="bg-red-50 border-l-4 border-red-400 p-4 mb-6">
      <div class="flex">
        <div class="flex-shrink-0">
          <i class="fas fa-exclamation-circle text-red-400"></i>
        </div>
        <div class="ml-3">
          <p class="text-sm text-red-700"><%= error %></p>
        </div>
      </div>
    </div>
  <% } %>

  <!-- Formulario del perfil -->
  <div class="bg-white shadow-md rounded-lg overflow-hidden">
    <form method="POST" action="/servers/<%= guild.id %>/profile" enctype="multipart/form-data">
      <div class="px-4 py-5 border-b border-gray-200 sm:px-6">
        <h3 class="text-lg leading-6 font-medium text-gray-900">
          <%= profile ? 'Información de Personaje' : 'Crear Nuevo Personaje' %>
        </h3>
        <p class="mt-1 max-w-2xl text-sm text-gray-500">
          <%= profile ? 'Edita los detalles de tu personaje.' : 'Completa los siguientes datos para crear tu personaje.' %>
          <% if (!serverConfig.config.allowProfileEditing && profile) { %>
            <span class="text-amber-600">Nota: La edición de perfiles está limitada en este servidor. Algunos campos podrían no ser editables.</span>
          <% } %>
        </p>
      </div>
      
      <div class="px-4 py-5 sm:p-6">
        <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
          <!-- Avatar y nombre del personaje -->
          <div class="sm:col-span-6">
            <div class="flex flex-col sm:flex-row items-center gap-6">
              <div class="flex-shrink-0">
                <div class="mb-3 relative mx-auto w-32 h-32">
                  <% if (profile && profile.character.avatar) { %>
                    <img src="<%= profile.character.avatar %>" id="avatarPreview" alt="<%= profile.character.name %>" class="w-32 h-32 rounded-full object-cover border-4 border-white shadow">
                  <% } else { %>
                    <div id="avatarPreview" class="w-32 h-32 rounded-full bg-indigo-100 flex items-center justify-center">
                      <span class="text-indigo-800 font-bold text-4xl"><%= profile && profile.character.name ? profile.character.name.charAt(0) : '?' %></span>
                    </div>
                  <% } %>
                </div>
              </div>
              
              <div class="flex-grow space-y-4">
                <!-- Reemplazar el input de URL por un input de archivo -->
                <div>
                  <label for="characterAvatar" class="block text-sm font-medium text-gray-700 mb-1">Avatar del personaje</label>
                  <input type="file" name="characterAvatar" id="characterAvatar" accept="image/*" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100 focus:outline-none" <%= !serverConfig.config.allowProfileEditing && profile ? 'disabled' : '' %>>
                  <p class="mt-1 text-xs text-gray-500">Sube una imagen para tu personaje</p>
                </div>
                
                <div>
                  <label for="characterName" class="block text-sm font-medium text-gray-700 mb-1">Nombre del personaje</label>
                  <input type="text" name="characterName" id="characterName" value="<%= profile ? profile.character.name : '' %>" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" required <%= !serverConfig.config.allowProfileEditing && profile ? 'readonly' : '' %>>
                  <p class="mt-1 text-xs text-gray-500">El nombre con el que se identificará tu personaje</p>
                </div>
              </div>
            </div>
          </div>

          <div class="sm:col-span-3">
            <label for="race" class="block text-sm font-medium text-gray-700">
              Raza
            </label>
            <div class="mt-1">
              <select id="race" name="race" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" required <%= profile ? 'disabled' : '' %>>
                <% serverConfig.roleplay.races.forEach(race => { %>
                  <option value="<%= race %>" <%= profile && profile.character.race === race ? 'selected' : '' %>><%= race %></option>
                <% }) %>
              </select>
            </div>
            <p class="mt-1 text-xs text-gray-500">La raza de tu personaje</p>
            
            <!-- Contenedor para la descripción de la raza -->
            <div id="raceDescription" class="mt-2 p-3 bg-gray-50 rounded-md text-sm text-gray-700 transition-all duration-300" style="min-height: 80px; opacity: 0;">
              Selecciona una raza para ver su descripción.
            </div>
          </div>

          <div class="sm:col-span-3">
            <label for="class" class="block text-sm font-medium text-gray-700">
              Clase
            </label>
            <div class="mt-1">
              <select id="class" name="class" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" required <%= profile ? 'disabled' : '' %>>
                <%
                  // Obtener la raza seleccionada
                  const selectedRace = profile ? profile.character.race : serverConfig.roleplay.races[0];
                  
                  // Intentar obtener las clases permitidas para la raza seleccionada
                  let allowedClasses = [];
                  
                  try {
                    // Convertir el documento Mongoose a un objeto JavaScript plano
                    // Esto nos permitirá acceder a sus propiedades normalmente
                    const restrictions = serverConfig.roleplay.raceClassRestrictions.toObject ? serverConfig.roleplay.raceClassRestrictions.toObject() : serverConfig.roleplay.raceClassRestrictions;

                    // Ahora podemos acceder a las propiedades normalmente
                    if (restrictions && restrictions[selectedRace] && Array.isArray(restrictions[selectedRace])) {
                      const racialRestrictions = restrictions[selectedRace];
                      
                      // Si es un array con strings que contienen comas, procesarlos
                      if (racialRestrictions.length > 0 && typeof racialRestrictions[0] === 'string') {
                        if (racialRestrictions[0].includes(',')) {
                          // Dividir por comas y limpiar espacios
                          allowedClasses = racialRestrictions[0].split(',').map(c => c.trim());
                        } else {
                          allowedClasses = racialRestrictions;
                        }
                      }
                    }
                    
                    // Si no se encontraron clases, usar la función get directamente
                    if (allowedClasses.length === 0 && typeof serverConfig.roleplay.raceClassRestrictions.get === 'function') {
                      const racialRestrictions = serverConfig.roleplay.raceClassRestrictions.get(selectedRace);
                      
                      if (racialRestrictions && Array.isArray(racialRestrictions)) {
                        if (racialRestrictions.length > 0 && typeof racialRestrictions[0] === 'string') {
                          if (racialRestrictions[0].includes(',')) {
                            allowedClasses = racialRestrictions[0].split(',').map(c => c.trim());
                          } else {
                            allowedClasses = racialRestrictions;
                          }
                        }
                      }
                    }
                  } catch (error) {
                    console.error("Error al obtener restricciones:", error);
                  }
                  
                  // Si aún no tenemos clases, intentar una última opción
                  if (allowedClasses.length === 0) {
                    try {
                      // Usar la notación de punto para acceder a las propiedades
                      const raceClassRestrictions = serverConfig.toObject().roleplay.raceClassRestrictions;
                      if (raceClassRestrictions && raceClassRestrictions[selectedRace]) {
                        const restrictions = raceClassRestrictions[selectedRace];
                        if (Array.isArray(restrictions) && restrictions.length > 0) {
                          if (typeof restrictions[0] === 'string' && restrictions[0].includes(',')) {
                            allowedClasses = restrictions[0].split(',').map(c => c.trim());
                          } else {
                            allowedClasses = restrictions;
                          }
                        }
                      }
                    } catch (error) {
                      console.error("Error al obtener restricciones (segunda opción):", error);
                    }
                  }
                  
                  // Si no pudimos obtener las clases de ninguna forma, usar todas como fallback
                  if (allowedClasses.length === 0) {
                    allowedClasses = serverConfig.roleplay.classes;
                  }
                %>
                
                <% allowedClasses.forEach(characterClass => { %>
                  <option value="<%= characterClass %>" <% if (profile && profile.character.class === characterClass) { %>selected="selected"<% } %>>
                    <%= characterClass %>
                  </option>
                <% }); %>
              </select>
            </div>
            <p class="mt-1 text-xs text-gray-500">La clase o profesión de tu personaje</p>
            
            <!-- Contenedor para la descripción de la clase -->
            <div id="classDescription" class="mt-2 p-3 bg-gray-50 rounded-md text-sm text-gray-700 transition-all duration-300" style="min-height: 80px; opacity: 0;">
              Selecciona una clase para ver su descripción.
            </div>
          </div>

          <div class="sm:col-span-2">
            <label for="age" class="block text-sm font-medium text-gray-700">
              Edad
            </label>
            <div class="mt-1">
              <input type="number" name="age" id="age" value="<%= profile ? profile.character.age : 20 %>" min="1" max="1000" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" <%= !serverConfig.config.allowProfileEditing && profile ? 'readonly' : '' %>>
            </div>
            <p class="mt-1 text-xs text-gray-500">La edad de tu personaje</p>
          </div>

          <div class="sm:col-span-6">
            <label for="bio" class="block text-sm font-medium text-gray-700">
              Biografía
            </label>
            <div class="mt-1">
              <textarea id="bio" name="bio" rows="6" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" <%= !serverConfig.config.allowProfileEditing && profile ? 'readonly' : '' %>><%= profile ? profile.character.bio : '' %></textarea>
            </div>
            <p class="mt-1 text-xs text-gray-500">Historia de fondo, personalidad, objetivos y motivaciones de tu personaje</p>
          </div>
          
          <% if (profile) { %>
            <!-- Estadísticas (solo visibles si el perfil ya existe) -->
            <div class="sm:col-span-6 border-t border-gray-200 pt-6">
              <h3 class="text-base font-medium text-gray-900">Estadísticas</h3>
              <p class="mt-1 text-sm text-gray-500">Estas estadísticas se actualizan automáticamente mediante el uso de comandos del bot.</p>
              
              <div class="mt-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
                <div class="bg-gray-50 p-4 rounded-md">
                  <div class="text-sm font-medium text-gray-500">Nivel</div>
                  <div class="mt-1 text-2xl font-semibold text-gray-900"><%= profile.character.level %></div>
                  <div class="mt-1 w-full bg-gray-200 rounded-full h-2">
                    <div class="bg-blue-600 h-2 rounded-full" style="width: <%= Math.floor((profile.character.experience / (profile.character.level * 100)) * 100) %>%"></div>
                  </div>
                  <div class="mt-1 text-xs text-gray-500"><%= profile.character.experience %>/<%= profile.character.level * 100 %> EXP</div>
                </div>
                
                <div class="bg-gray-50 p-4 rounded-md">
                  <div class="text-sm font-medium text-gray-500">Salud</div>
                  <div class="mt-1 text-2xl font-semibold text-gray-900"><%= profile.character.health.current %>/<%= profile.character.health.max %></div>
                  <div class="mt-1 w-full bg-gray-200 rounded-full h-2">
                    <div class="bg-red-600 h-2 rounded-full" style="width: <%= Math.floor((profile.character.health.current / profile.character.health.max) * 100) %>%"></div>
                  </div>
                </div>
                
                <div class="bg-gray-50 p-4 rounded-md">
                  <div class="text-sm font-medium text-gray-500">Monedas</div>
                  <div class="mt-1 text-2xl font-semibold text-gray-900 flex items-center">
                    <i class="fas fa-coins text-yellow-500 mr-2"></i>
                    <%= profile.character.currency %>
                  </div>
                </div>
                
                <div class="bg-gray-50 p-4 rounded-md">
                  <div class="text-sm font-medium text-gray-500">Victorias/Derrotas</div>
                  <div class="mt-1 text-2xl font-semibold text-gray-900"><%= profile.stats.wins %>/<%= profile.stats.losses %></div>
                  <div class="mt-1 text-xs text-gray-500">
                    <%= profile.stats.quests.completed %> misiones completadas
                  </div>
                </div>
              </div>
            </div>
          <% } %>
          
          <!-- Preferencias -->
          <div class="sm:col-span-6 border-t border-gray-200 pt-6">
            <h3 class="text-base font-medium text-gray-900">Preferencias</h3>
            <p class="mt-1 text-sm text-gray-500">Personaliza cómo deseas que se muestre tu perfil.</p>
            
            <div class="mt-4 grid grid-cols-1 sm:grid-cols-3 gap-4">
              <div>
                <label for="visibility" class="block text-sm font-medium text-gray-700">Visibilidad</label>
                <select id="visibility" name="visibility" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                  <option value="public" <%= profile && profile.preferences.visibility === 'public' ? 'selected' : '' %>>Público - Visible para todos</option>
                  <option value="friends" <%= profile && profile.preferences.visibility === 'friends' ? 'selected' : '' %>>Amigos - Solo para amigos</option>
                  <option value="private" <%= profile && profile.preferences.visibility === 'private' ? 'selected' : '' %>>Privado - Solo para mí</option>
                </select>
              </div>
              
              <div>
                <label for="customTitle" class="block text-sm font-medium text-gray-700">
                  Título personalizado
                </label>
                <div class="mt-1">
                  <input type="text" name="customTitle" id="customTitle" value="<%= profile ? profile.preferences.customTitle : '' %>" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md">
                </div>
                <p class="mt-1 text-xs text-gray-500">Aparecerá debajo de tu nombre</p>
              </div>
            </div>
            
            <div class="mt-4">
              <div class="flex items-center">
                <input id="notifications" name="notifications" type="checkbox" <%= profile && profile.preferences.notifications ? 'checked' : '' %> class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                <label for="notifications" class="ml-2 block text-sm text-gray-900">
                  Recibir notificaciones
                </label>
              </div>
              <p class="mt-1 text-xs text-gray-500 ml-6">Recibirás notificaciones sobre tu personaje y actividades</p>
            </div>
          </div>
        </div>
      </div>
      
      <div class="px-4 py-3 bg-gray-50 text-right sm:px-6">
        <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          <%= profile ? 'Guardar cambios' : 'Crear perfil' %>
        </button>
      </div>
    </form>
  </div>
  
  <!-- Inventario y habilidades (solo visibles si el perfil ya existe) -->
<% if (profile) { %>
  <div class="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
    <!-- Inventario -->
    <div class="bg-white shadow-md rounded-lg">
      <div class="px-4 py-5 border-b border-gray-200 sm:px-6">
        <h3 class="text-lg leading-6 font-medium text-gray-900">
          Inventario
        </h3>
        <p class="mt-1 max-w-2xl text-sm text-gray-500">
          Items que posee tu personaje. Se gestionan con comandos del bot.
        </p>
      </div>
      <div class="px-4 py-5 sm:p-6">
        <% if (profile.character.inventory && profile.character.inventory.length > 0) { %>
          <ul class="divide-y divide-gray-200">
            <% profile.character.inventory.forEach(inventoryItem => { %>
              <% console.log(inventoryItem); %>
              <li class="py-3">
                <div class="flex justify-between">
                  <span class="text-sm font-medium text-gray-900">
                    <!-- Usar el nombre del item enriquecido si está disponible -->
                    <%= inventoryItem.item ? inventoryItem.item.name : 'Item desconocido' %>
                  </span>
                  <span class="text-sm text-gray-500">x<%= inventoryItem.quantity %></span>
                </div>
                <!-- Mostrar descripción si está disponible -->
                <% if (inventoryItem.item && inventoryItem.item.description) { %>
                  <p class="text-xs text-gray-500 mt-1"><%= inventoryItem.item.description.substring(0, 120) %><%= inventoryItem.item.description.length > 120 ? '...' : '' %></p>
                <% } %>
                
                <!-- Mostrar información adicional en etiquetas -->
                <div class="mt-2 flex flex-wrap gap-1">
                  <% if (inventoryItem.item && inventoryItem.item.type) { %>
                    <% let typeColor = 'blue'; %>
                    <% if (inventoryItem.item.type === 'equipment') typeColor = 'indigo'; %>
                    <% if (inventoryItem.item.type === 'consumable') typeColor = 'purple'; %>
                    <% if (inventoryItem.item.type === 'quest') typeColor = 'yellow'; %>
                    <% if (inventoryItem.item.type === 'resource') typeColor = 'green'; %>
                    
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-<%= typeColor %>-100 text-<%= typeColor %>-800">
                      <%= inventoryItem.item.type %>
                    </span>
                  <% } %>
                  
                  <% if (inventoryItem.item && inventoryItem.item.equipmentSlot) { %>
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-violet-100 text-violet-800">
                      <%= inventoryItem.item.equipmentSlot %>
                    </span>
                  <% } %>
                  
                  <% if (inventoryItem.equipped) { %>
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                      Equipado
                    </span>
                  <% } %>
                  
                  <% if (inventoryItem.uses) { %>
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-amber-100 text-amber-800">
                      Usos: <%= inventoryItem.uses %>
                    </span>
                  <% } %>
                  
                  <% if (inventoryItem.item && inventoryItem.item.levelRequired > 1) { %>
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                      Nivel <%= inventoryItem.item.levelRequired %>+
                    </span>
                  <% } %>
                </div>
                
                <!-- Mostrar efectos del item si los tiene -->
                <% if (inventoryItem.item && inventoryItem.item.effects && 
                       (inventoryItem.item.effects.health || 
                        inventoryItem.item.effects.mana || 
                        inventoryItem.item.effects.strength || 
                        inventoryItem.item.effects.intelligence || 
                        inventoryItem.item.effects.dexterity || 
                        inventoryItem.item.effects.defense)) { %>
                  <div class="mt-2 grid grid-cols-2 gap-x-2 gap-y-1 text-xs">
                    <% if (inventoryItem.item.effects.health) { %>
                      <span class="<%= inventoryItem.item.effects.health > 0 ? 'text-green-600' : 'text-red-600' %>">
                        Salud: <%= inventoryItem.item.effects.health > 0 ? '+' : '' %><%= inventoryItem.item.effects.health %>
                      </span>
                    <% } %>
                    
                    <% if (inventoryItem.item.effects.mana) { %>
                      <span class="<%= inventoryItem.item.effects.mana > 0 ? 'text-blue-600' : 'text-red-600' %>">
                        Maná: <%= inventoryItem.item.effects.mana > 0 ? '+' : '' %><%= inventoryItem.item.effects.mana %>
                      </span>
                    <% } %>
                    
                    <% if (inventoryItem.item.effects.strength) { %>
                      <span class="<%= inventoryItem.item.effects.strength > 0 ? 'text-red-600' : 'text-gray-600' %>">
                        Fuerza: <%= inventoryItem.item.effects.strength > 0 ? '+' : '' %><%= inventoryItem.item.effects.strength %>
                      </span>
                    <% } %>
                    
                    <% if (inventoryItem.item.effects.intelligence) { %>
                      <span class="<%= inventoryItem.item.effects.intelligence > 0 ? 'text-purple-600' : 'text-gray-600' %>">
                        Inteligencia: <%= inventoryItem.item.effects.intelligence > 0 ? '+' : '' %><%= inventoryItem.item.effects.intelligence %>
                      </span>
                    <% } %>
                    
                    <% if (inventoryItem.item.effects.dexterity) { %>
                      <span class="<%= inventoryItem.item.effects.dexterity > 0 ? 'text-yellow-600' : 'text-gray-600' %>">
                        Destreza: <%= inventoryItem.item.effects.dexterity > 0 ? '+' : '' %><%= inventoryItem.item.effects.dexterity %>
                      </span>
                    <% } %>
                    
                    <% if (inventoryItem.item.effects.defense) { %>
                      <span class="<%= inventoryItem.item.effects.defense > 0 ? 'text-blue-600' : 'text-gray-600' %>">
                        Defensa: <%= inventoryItem.item.effects.defense > 0 ? '+' : '' %><%= inventoryItem.item.effects.defense %>
                      </span>
                    <% } %>
                  </div>
                <% } %>
                
                <!-- Mostrar restricciones de raza/clase si existen -->
                <% if (inventoryItem.item && 
                      ((inventoryItem.item.raceRestrictions && inventoryItem.item.raceRestrictions.length > 0) || 
                       (inventoryItem.item.classRestrictions && inventoryItem.item.classRestrictions.length > 0))) { %>
                  <div class="mt-2 text-xs italic text-gray-500">
                    <% if (inventoryItem.item.raceRestrictions && inventoryItem.item.raceRestrictions.length > 0) { %>
                      <div>Razas: <%= inventoryItem.item.raceRestrictions.length === serverConfig.roleplay.races.length ? 'Todas' : inventoryItem.item.raceRestrictions.slice(0, 3).join(', ') %><%= inventoryItem.item.raceRestrictions.length > 3 ? '...' : '' %></div>
                    <% } %>
                    
                    <% if (inventoryItem.item.classRestrictions && inventoryItem.item.classRestrictions.length > 0) { %>
                      <div>Clases: <%= inventoryItem.item.classRestrictions.length === serverConfig.roleplay.classes.length ? 'Todas' : inventoryItem.item.classRestrictions.slice(0, 3).join(', ') %><%= inventoryItem.item.classRestrictions.length > 3 ? '...' : '' %></div>
                    <% } %>
                  </div>
                <% } %>
              </li>
            <% }); %>
          </ul>
        <% } else { %>
          <div class="text-center py-6">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No hay items</h3>
            <p class="mt-1 text-sm text-gray-500">
              Tu inventario está vacío. Utiliza los comandos del bot para conseguir items.
            </p>
          </div>
        <% } %>
      </div>
    </div>
    
    <!-- Habilidades -->
    <div class="bg-white shadow-md rounded-lg">
      <div class="px-4 py-5 border-b border-gray-200 sm:px-6">
        <h3 class="text-lg leading-6 font-medium text-gray-900">
          Habilidades
        </h3>
        <p class="mt-1 max-w-2xl text-sm text-gray-500">
          Habilidades de tu personaje. Se mejoran con comandos del bot.
        </p>
      </div>
      <div class="px-4 py-5 sm:p-6">
        <% if (profile.character.skills && profile.character.skills.length > 0) { %>
          <ul class="divide-y divide-gray-200">
            <% profile.character.skills.forEach(characterSkill => { %>
              <li class="py-3">
                <div class="flex justify-between">
                  <span class="text-sm font-medium text-gray-900">
                    <!-- Usar el nombre de la habilidad enriquecida si está disponible -->
                    <%= characterSkill.skill ? characterSkill.skill.name : 'Habilidad desconocida' %>
                  </span>
                  <span class="text-sm text-gray-500">Nivel <%= characterSkill.level %></span>
                </div>
                
                <!-- Mostrar descripción si está disponible -->
                <% if (characterSkill.skill && characterSkill.skill.description) { %>
                  <p class="text-xs text-gray-500 mt-1"><%= characterSkill.skill.description.substring(0, 120) %><%= characterSkill.skill.description.length > 120 ? '...' : '' %></p>
                <% } %>
                
                <!-- Barra de nivel -->
                <div class="w-full bg-gray-200 rounded-full h-1.5 mt-2">
                  <div class="bg-indigo-600 h-1.5 rounded-full" style="width: <%= Math.min(100, characterSkill.level * 10) %>%"></div>
                </div>
                
                <!-- Mostrar información adicional en etiquetas -->
                <div class="mt-2 flex flex-wrap gap-1">
                  <% if (characterSkill.skill && characterSkill.skill.category) { %>
                    <% let categoryColor = 'blue'; %>
                    <% if (characterSkill.skill.category === 'attack') categoryColor = 'red'; %>
                    <% if (characterSkill.skill.category === 'defense') categoryColor = 'blue'; %>
                    <% if (characterSkill.skill.category === 'healing') categoryColor = 'green'; %>
                    <% if (characterSkill.skill.category === 'utility') categoryColor = 'yellow'; %>
                    <% if (characterSkill.skill.category === 'passive') categoryColor = 'purple'; %>
                    
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-<%= categoryColor %>-100 text-<%= categoryColor %>-800">
                      <%= characterSkill.skill.category %>
                    </span>
                  <% } %>
                  
                  <% if (characterSkill.skill && characterSkill.skill.targetType) { %>
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                      <%= characterSkill.skill.targetType %>
                    </span>
                  <% } %>
                  
                  <% if (characterSkill.skill && characterSkill.skill.levelRequired > 1) { %>
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                      Req. Nivel <%= characterSkill.skill.levelRequired %>
                    </span>
                  <% } %>
                </div>
                
                <!-- Mostrar efectos de la habilidad -->
                <% if (characterSkill.skill && characterSkill.skill.effects) { %>
                  <div class="mt-2 grid grid-cols-2 gap-x-2 gap-y-1 text-xs">
                    <% if (characterSkill.skill.effects.damage) { %>
                      <span class="text-red-600">
                        Daño: <%= characterSkill.skill.effects.damage %>
                      </span>
                    <% } %>
                    
                    <% if (characterSkill.skill.effects.healing) { %>
                      <span class="text-green-600">
                        Curación: <%= characterSkill.skill.effects.healing %>
                      </span>
                    <% } %>
                    
                    <% if (characterSkill.skill.manaCost) { %>
                      <span class="text-blue-600">
                        Coste de maná: <%= characterSkill.skill.manaCost %>
                      </span>
                    <% } %>
                    
                    <% if (characterSkill.skill.cooldown) { %>
                      <span class="text-purple-600">
                        Cooldown: <%= characterSkill.skill.cooldown %>s
                      </span>
                    <% } %>
                    
                    <% if (characterSkill.skill.effects.duration) { %>
                      <span class="text-amber-600">
                        Duración: <%= characterSkill.skill.effects.duration %>s
                      </span>
                    <% } %>
                  </div>
                <% } %>
                
                <!-- Mostrar buffs y otras características especiales -->
                <% if (characterSkill.skill && characterSkill.skill.effects && 
                       (characterSkill.skill.effects.buffStrength || 
                        characterSkill.skill.effects.buffIntelligence || 
                        characterSkill.skill.effects.buffDexterity || 
                        characterSkill.skill.effects.buffDefense)) { %>
                  <div class="mt-1 grid grid-cols-2 gap-x-2 gap-y-1 text-xs">
                    <% if (characterSkill.skill.effects.buffStrength) { %>
                      <span class="text-red-600">
                        Fuerza: +<%= characterSkill.skill.effects.buffStrength %>
                      </span>
                    <% } %>
                    
                    <% if (characterSkill.skill.effects.buffIntelligence) { %>
                      <span class="text-purple-600">
                        Inteligencia: +<%= characterSkill.skill.effects.buffIntelligence %>
                      </span>
                    <% } %>
                    
                    <% if (characterSkill.skill.effects.buffDexterity) { %>
                      <span class="text-yellow-600">
                        Destreza: +<%= characterSkill.skill.effects.buffDexterity %>
                      </span>
                    <% } %>
                    
                    <% if (characterSkill.skill.effects.buffDefense) { %>
                      <span class="text-blue-600">
                        Defensa: +<%= characterSkill.skill.effects.buffDefense %>
                      </span>
                    <% } %>
                  </div>
                <% } %>
                
                <!-- Mostrar estado de cooldown si existe -->
                <% if (characterSkill.cooldownUntil) { %>
                  <% 
                    const now = new Date();
                    const cooldownDate = new Date(characterSkill.cooldownUntil);
                    const isOnCooldown = cooldownDate > now;
                  %>
                  <% if (isOnCooldown) { %>
                    <div class="mt-2">
                      <span class="text-xs text-red-600">
                        En cooldown hasta: <%= cooldownDate.toLocaleTimeString() %>
                      </span>
                    </div>
                  <% } %>
                <% } %>
                
                <!-- Mostrar usos restantes si aplica -->
                <% if (characterSkill.usesLeft !== null && characterSkill.usesLeft !== undefined) { %>
                  <div class="mt-2">
                    <span class="text-xs <%= characterSkill.usesLeft > 0 ? 'text-blue-600' : 'text-red-600' %>">
                      Usos restantes: <%= characterSkill.usesLeft %>
                    </span>
                  </div>
                <% } %>
              </li>
            <% }); %>
          </ul>
        <% } else { %>
          <div class="text-center py-6">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">Sin habilidades</h3>
            <p class="mt-1 text-sm text-gray-500">
              Aún no has desbloqueado habilidades. Usa los comandos del bot para obtenerlas.
            </p>
          </div>
        <% } %>
      </div>
    </div>
  </div>
<% } %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // PARTE 1: GESTIÓN DEL AVATAR
    const avatarInput = document.getElementById('characterAvatar');
    const avatarPreview = document.getElementById('avatarPreview');
    const characterName = document.getElementById('characterName');
    
    if (avatarInput && avatarPreview) {
      avatarInput.addEventListener('change', updateAvatarPreview);
      
      function updateAvatarPreview() {
        if (avatarInput.files && avatarInput.files[0]) {
          const file = avatarInput.files[0];
          
          // Verificar el tamaño del archivo (máx 1GB)
          if (file.size > 1024 * 1024 * 1024) {
            alert('La imagen no debe superar 1GB');
            avatarInput.value = '';
            return;
          }
          
          const reader = new FileReader();
          
          reader.onload = function(e) {
            if (avatarPreview.tagName === 'IMG') {
              avatarPreview.src = e.target.result;
            } else {
              // Si es un div con iniciales, reemplazarlo por una imagen
              const parent = avatarPreview.parentNode;
              const newImg = document.createElement('img');
              newImg.id = 'avatarPreview';
              newImg.src = e.target.result;
              newImg.alt = characterName.value || 'Avatar';
              newImg.className = 'w-32 h-32 rounded-full object-cover border-4 border-white shadow';
              parent.replaceChild(newImg, avatarPreview);
              avatarPreview = newImg;
            }
          };
          
          reader.readAsDataURL(file);
        } else {
          // Si no hay archivo seleccionado, mostrar las iniciales
          const initial = characterName.value ? characterName.value.charAt(0) : '?';
          if (avatarPreview.tagName === 'IMG') {
            // Reemplazar la imagen con un div
            const parent = avatarPreview.parentNode;
            const newDiv = document.createElement('div');
            newDiv.id = 'avatarPreview';
            newDiv.className = 'w-32 h-32 rounded-full bg-indigo-100 flex items-center justify-center';
            newDiv.innerHTML = `<span class="text-indigo-800 font-bold text-4xl">${initial}</span>`;
            parent.replaceChild(newDiv, avatarPreview);
            avatarPreview = newDiv;
          }
        }
      }
      
      // También actualizar cuando cambia el nombre (para las iniciales)
      if (characterName) {
        characterName.addEventListener('input', function() {
          if (!avatarInput.files || !avatarInput.files[0]) {
            const initial = characterName.value ? characterName.value.charAt(0) : '?';
            if (avatarPreview.tagName !== 'IMG') {
              const span = avatarPreview.querySelector('span');
              if (span) {
                span.textContent = initial;
              }
            }
          }
        });
      }
    }

    // PARTE 2: GESTIÓN DE RAZAS Y CLASES
    const raceSelect = document.getElementById("race");
    const classSelect = document.getElementById("class");
    const raceDescriptionEl = document.getElementById("raceDescription");
    const classDescriptionEl = document.getElementById("classDescription");

    // Verificar que los elementos existen
    if (!raceSelect || !classSelect || !raceDescriptionEl || !classDescriptionEl) {
        console.error("Error: No se encontraron todos los elementos necesarios.");
        return;
    }

    // Obtener las restricciones de clases por raza desde el servidor
    const rawRaceClassRestrictions = <%- JSON.stringify(serverConfig.roleplay.raceClassRestrictions || {}) %>;
    
    // Procesamos las restricciones para manejar el formato especial
    const raceClassRestrictions = {};
    for (const race in rawRaceClassRestrictions) {
        if (Array.isArray(rawRaceClassRestrictions[race]) && rawRaceClassRestrictions[race].length > 0) {
            // Si es un array, procesamos cada entrada
            const processedClasses = [];
            
            rawRaceClassRestrictions[race].forEach(classEntry => {
                // Verificamos si la entrada tiene comas
                if (typeof classEntry === 'string' && classEntry.includes(',')) {
                    // Dividimos por comas y añadimos cada clase
                    const splitClasses = classEntry.split(',').map(cls => cls.trim());
                    processedClasses.push(...splitClasses);
                } else {
                    // Si no tiene comas, lo añadimos tal cual
                    processedClasses.push(classEntry);
                }
            });
            
            raceClassRestrictions[race] = processedClasses;
        } else {
            // Si no es un array, usamos el valor tal cual
            raceClassRestrictions[race] = rawRaceClassRestrictions[race];
        }
    }
    
    // Obtener las descripciones
    const raceDescriptions = <%- JSON.stringify(serverConfig.roleplay.raceDescriptions || {}) %>;
    const classDescriptions = <%- JSON.stringify(serverConfig.roleplay.classDescriptions || {}) %>;

    function updateRaceDescription() {
        const selectedRace = raceSelect.value;
        const description = raceDescriptions[selectedRace] || "No hay descripción disponible para esta raza.";
        
        // Animación de fundido
        raceDescriptionEl.style.opacity = "0";
        setTimeout(() => {
            raceDescriptionEl.textContent = description;
            raceDescriptionEl.style.opacity = "1";
        }, 300);
    }
    
    function updateClassDescription() {
        const selectedClass = classSelect.value;
        const description = classDescriptions[selectedClass] || "No hay descripción disponible para esta clase.";
        
        // Animación de fundido
        classDescriptionEl.style.opacity = "0";
        setTimeout(() => {
            classDescriptionEl.textContent = description;
            classDescriptionEl.style.opacity = "1";
        }, 300);
    }

    function updateClassOptions() {
        const selectedRace = raceSelect.value;
        const allowedClasses = raceClassRestrictions[selectedRace] || [];
        
        console.log("Raza seleccionada:", selectedRace);
        console.log("Clases permitidas:", allowedClasses);

        // Limpiar el select de clases
        classSelect.innerHTML = "";

        if (!allowedClasses || allowedClasses.length === 0) {
            // Si la raza no tiene clases asignadas
            const option = document.createElement("option");
            option.value = "";
            option.textContent = "No hay clases disponibles";
            option.disabled = true;
            option.selected = true;
            classSelect.appendChild(option);
        } else {
            // Agregar cada clase como una opción individual
            allowedClasses.forEach(className => {
                const option = document.createElement("option");
                option.value = className;
                option.textContent = className;
                classSelect.appendChild(option);
            });
        }

        // Animación de opacidad
        classSelect.style.opacity = "0";
        setTimeout(() => {
            classSelect.style.opacity = "1";
            updateClassDescription();
        }, 200);
    }

    // Inicializar descripciones y opciones
    updateClassOptions();
    updateRaceDescription();
    updateClassDescription();

    // Escuchar cambios
    raceSelect.addEventListener("change", function() {
        updateClassOptions();
        updateRaceDescription();
    });
    
    classSelect.addEventListener("change", updateClassDescription);
});

  document.addEventListener('DOMContentLoaded', function() {
    const classSelect = document.getElementById('class');
    const profileClass = '<%= profile ? profile.character.class : null %>';
    
    if (classSelect && profileClass) {
      let found = false;
      for (let i = 0; i < classSelect.options.length; i++) {
        const option = classSelect.options[i];
        if (option.value === profileClass) {
          classSelect.selectedIndex = i;
          option.selected = true;
          found = true;
          break;
        }
      }
    }
  });

</script>

<%- include('../partials/footer') %>