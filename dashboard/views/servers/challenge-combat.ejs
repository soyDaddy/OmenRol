<%- include('../partials/header') %>

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  <!-- Encabezado de la página -->
  <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-8">
    <div>
      <h1 class="text-2xl font-bold text-gray-900">Combate: <%= currentStage.name %></h1>
      <p class="mt-2 text-sm text-gray-500">Misión: <%= mission.title %></p>
    </div>
    <div class="mt-4 md:mt-0 flex gap-2">
      <a href="/servers/<%= guild.id %>/missions/<%= mission._id %>/progress" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        <i class="fas fa-arrow-left mr-2"></i>Volver a la misión
      </a>
    </div>
  </div>
  
  <!-- Área de combate -->
  <div class="bg-white shadow rounded-lg overflow-hidden">
    <div class="px-4 py-5 sm:px-6">
      <h3 class="text-lg leading-6 font-medium text-gray-900">⚔️ Batalla</h3>
      <p class="mt-1 text-sm text-gray-500">
        <%= currentStage.description %>
      </p>
    </div>
    
    <div class="border-t border-gray-200 p-6">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <!-- Jugador -->
        <div class="border rounded-lg p-4 bg-indigo-50">
          <div class="flex items-center mb-4">
            <% if (profile.character.avatar) { %>
              <img src="<%= profile.character.avatar %>" alt="<%= profile.character.name %>" class="h-12 w-12 rounded-full">
            <% } else { %>
              <div class="h-12 w-12 rounded-full bg-blue-200 flex items-center justify-center">
                <span class="text-blue-600 font-bold"><%= profile.character.name ? profile.character.name.charAt(0) : 'P' %></span>
              </div>
            <% } %>
            <div class="ml-4">
              <h4 class="text-lg font-medium text-blue-800"><%= profile.character.name || 'Personaje' %></h4>
              <p class="text-sm text-blue-600">Nivel <%= profile.character.level %> <%= profile.character.class %></p>
            </div>
          </div>
          
          <!-- Estadísticas del jugador -->
          <div class="mb-4">
            <div class="flex justify-between items-center mb-1">
              <span class="text-sm font-medium text-blue-700">Salud</span>
              <span class="text-sm text-blue-700" id="player-health-text"><%= profile.character.health.current %>/<%= profile.character.health.max %></span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2.5">
              <div class="bg-indigo-600 h-2.5 rounded-full" id="player-health-bar" style="width: <%= (profile.character.health.current / profile.character.health.max * 100) %>%"></div>
            </div>
          </div>
          
          <div class="grid grid-cols-2 gap-2 mb-4">
            <div>
              <span class="text-xs text-blue-600">Fuerza</span>
              <p class="text-sm font-medium"><%= profile.character.stats.strength || 10 %></p>
            </div>
            <div>
              <span class="text-xs text-blue-600">Defensa</span>
              <p class="text-sm font-medium"><%= profile.character.stats.defense || 5 %></p>
            </div>
            <div>
              <span class="text-xs text-blue-600">Inteligencia</span>
              <p class="text-sm font-medium"><%= profile.character.stats.intelligence || 10 %></p>
            </div>
            <div>
              <span class="text-xs text-blue-600">Destreza</span>
              <p class="text-sm font-medium"><%= profile.character.stats.dexterity || 10 %></p>
            </div>
          </div>
        </div>
        
        <!-- Enemigo -->
        <div class="border rounded-lg p-4 bg-red-50">
          <div class="flex items-center mb-4">
            <div class="h-12 w-12 rounded-full bg-red-200 flex items-center justify-center">
              <% if (currentStage.challengeData?.enemyAvatar) { %>
                <img src="<%= currentStage.challengeData?.enemyAvatar %>" alt="<%= currentStage.challengeData?.enemyType || 'Enemigo' %>" class="h-12 w-12 rounded-full">
              <% } else { %>
                <span class="text-red-600 font-bold"><%= currentStage.challengeData?.enemyType ? currentStage.challengeData?.enemyType.charAt(0) : 'E' %></span>
              <% } %>
            </div>
            <div class="ml-4">
              <h4 class="text-lg font-medium text-red-800"><%= currentStage.challengeData?.enemyType || 'Enemigo' %></h4>
              <p class="text-sm text-red-600">Nivel <%= currentStage.challengeData?.enemyLevel || profile.character.level %></p>
            </div>
          </div>
          
          <!-- Estadísticas del enemigo -->
          <div class="mb-4">
            <div class="flex justify-between items-center mb-1">
              <span class="text-sm font-medium text-red-700">Salud</span>
              <span class="text-sm text-red-700" id="enemy-health-text"><%= currentStage.challengeData?.enemyHealth || 100 %>/<%= currentStage.challengeData?.enemyHealth || 100 %></span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2.5">
              <div class="bg-red-600 h-2.5 rounded-full" id="enemy-health-bar" style="width: 100%"></div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Registro de combate -->
      <div class="mt-6 border rounded-lg p-4 bg-gray-50 h-40 overflow-y-auto" id="combat-log">
        <p class="text-gray-600">¡El combate está a punto de comenzar!</p>
        <p class="text-gray-600">Elige tu acción para atacar.</p>
      </div>
      
      <!-- Acciones de combate -->
      <div class="mt-6 flex flex-wrap gap-2">
        <button id="attack-btn" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
          <i class="fas fa-sword mr-2"></i>
          Ataque básico
        </button>
        
        <!-- Habilidades -->
        <% if (profile.character.skills && profile.character.skills.length > 0) { %>
          <button id="skills-btn" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            <i class="fas fa-sparkles mr-2"></i>
            Usar habilidad
          </button>
        <% } %>
        
        <!-- Items -->
        <% if (profile.character.inventory && profile.character.inventory.length > 0) { %>
          <button id="items-btn" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
            <i class="fas fa-flask mr-2"></i>
            Usar item
          </button>
        <% } %>
        
        <button id="flee-btn" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          <i class="fas fa-running mr-2"></i>
          Huir
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Modales para habilidades e items -->
<div id="skills-modal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden flex items-center justify-center">
  <div class="bg-white rounded-lg p-6 max-w-md w-full">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Selecciona una habilidad</h3>
    <div class="max-h-60 overflow-y-auto mb-4">
      <ul class="divide-y divide-gray-200">
        <% if (profile.character.skills && profile.character.skills.length > 0) { %>
          <% profile.character.skills.forEach(skill => { %>
            <li class="py-2">
              <button class="skill-btn w-full text-left px-3 py-2 rounded hover:bg-indigo-50" data-skill-id="<%= skill.skillId %>">
                <div class="font-medium"><%= skill.name || 'Habilidad' %> (Nivel <%= skill.level || 1 %>)</div>
                <div class="text-sm text-gray-500"><%= skill.description || 'Sin descripción' %></div>
              </button>
            </li>
          <% }) %>
        <% } %>
      </ul>
    </div>
    <div class="flex justify-end">
      <button id="close-skills-modal" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none">
        Cancelar
      </button>
    </div>
  </div>
</div>

<div id="items-modal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden flex items-center justify-center">
  <div class="bg-white rounded-lg p-6 max-w-md w-full">
    <h3 class="text-lg font-medium text-gray-900 mb-4">Selecciona un item</h3>
    <div class="max-h-60 overflow-y-auto mb-4">
      <ul class="divide-y divide-gray-200">
        <% if (profile.character.inventory && profile.character.inventory.length > 0) { %>
          <% profile.character.inventory.forEach(item => { %>
            <li class="py-2">
              <button class="item-btn w-full text-left px-3 py-2 rounded hover:bg-indigo-50" data-item-id="<%= item.itemId %>">
                <div class="font-medium"><%= item.name || 'Item' %> (x<%= item.quantity || 1 %>)</div>
                <div class="text-sm text-gray-500"><%= item.description || 'Sin descripción' %></div>
              </button>
            </li>
          <% }) %>
        <% } %>
      </ul>
    </div>
    <div class="flex justify-end">
      <button id="close-items-modal" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none">
        Cancelar
      </button>
    </div>
  </div>
</div>

<!-- Modal de victoria -->
<div id="victory-modal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden flex items-center justify-center">
  <div class="bg-white rounded-lg p-6 max-w-md w-full">
    <h3 class="text-lg font-medium text-green-900 mb-4">¡Victoria!</h3>
    <p class="mb-4 text-gray-700">Has derrotado al <%= currentStage?.challengeData?.enemyType || 'enemigo' %>.</p>
    <div class="mb-4">
      <h4 class="font-medium text-gray-900 mb-2">Recompensas:</h4>
      <ul class="list-disc pl-5 space-y-1">
        <% if (currentStage?.challengeData?.rewards) { %>
          <% if (currentStage?.challengeData?.rewards.experience) { %>
            <li class="text-gray-700"><%= currentStage?.challengeData?.rewards.experience %> EXP</li>
          <% } %>
          <% if (currentStage?.challengeData?.rewards.currency) { %>
            <li class="text-gray-700"><%= currentStage?.challengeData?.rewards.currency %> monedas</li>
          <% } %>
        <% } %>
      </ul>
    </div>
    <div class="flex justify-end">
      <form action="/servers/<%= guild.id %>/missions/<%= mission._id %>/challenge/combat/complete" method="POST">
        <input type="hidden" name="success" value="true">
        <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none">
          Continuar
        </button>
      </form>
    </div>
  </div>
</div>

<!-- Modal de derrota -->
<div id="defeat-modal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden flex items-center justify-center">
  <div class="bg-white rounded-lg p-6 max-w-md w-full">
    <h3 class="text-lg font-medium text-red-900 mb-4">Derrota</h3>
    <p class="mb-4 text-gray-700">Has sido derrotado por el <%= currentStage?.challengeData?.enemyType || 'enemigo' %>.</p>
    <div class="flex justify-end">
      <a href="/servers/<%= guild.id %>/missions/<%= mission._id %>/progress" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none">
        Volver a intentar después
      </a>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
  // Referencias a elementos clave
  const resultModal = document.getElementById('result-modal');
  const successView = document.getElementById('success-view');
  const failureView = document.getElementById('failure-view');
  
  // Datos del jugador y enemigo
  const player = {
    health: {
      current: <%= profile.character.health.current %>,
      max: <%= profile.character.health.max %>
    },
    stats: {
      strength: <%= profile.character.stats.strength || 10 %>,
      defense: <%= profile.character.stats.defense || 5 %>,
      intelligence: <%= profile.character.stats.intelligence || 10 %>,
      dexterity: <%= profile.character.stats.dexterity || 10 %>
    }
  };
  
  const enemy = {
    health: {
      current: <%= currentStage?.challengeData?.enemyHealth || 100 %>,
      max: <%= currentStage?.challengeData?.enemyHealth || 100 %>
    },
    level: <%= currentStage?.challengeData?.enemyLevel || profile.character.level %>,
    type: '<%= currentStage?.challengeData?.enemyType || "Enemigo" %>'
  };
  
  // Variables para seguimiento del combate
  let combatStats = {
    damageDone: 0,
    damageReceived: 0,
    criticalHits: 0,
    roundsCompleted: 0,
    result: null,
    enemyType: enemy.type
  };
  
  // Elementos DOM
  const combatLog = document.getElementById('combat-log');
  const playerHealthBar = document.getElementById('player-health-bar');
  const playerHealthText = document.getElementById('player-health-text');
  const enemyHealthBar = document.getElementById('enemy-health-bar');
  const enemyHealthText = document.getElementById('enemy-health-text');
  
  // Botones
  const attackBtn = document.getElementById('attack-btn');
  const skillsBtn = document.getElementById('skills-btn');
  const itemsBtn = document.getElementById('items-btn');
  const fleeBtn = document.getElementById('flee-btn');
  
  // Modales
  const skillsModal = document.getElementById('skills-modal');
  const itemsModal = document.getElementById('items-modal');
  const victoryModal = document.getElementById('victory-modal');
  const defeatModal = document.getElementById('defeat-modal');
  
  // Botones de cierre de modales
  const closeSkillsModal = document.getElementById('close-skills-modal');
  const closeItemsModal = document.getElementById('close-items-modal');
  
  // Función para agregar mensaje al log de combate
  function addLogMessage(message, type = 'normal') {
    const p = document.createElement('p');
    p.textContent = message;
    
    switch (type) {
      case 'player-attack':
        p.className = 'text-blue-700';
        break;
      case 'enemy-attack':
        p.className = 'text-red-700';
        break;
      case 'critical':
        p.className = 'text-purple-700 font-medium';
        break;
      case 'heal':
        p.className = 'text-green-700';
        break;
      case 'system':
        p.className = 'text-gray-500 italic';
        break;
      default:
        p.className = 'text-gray-600';
    }
    
    combatLog.appendChild(p);
    combatLog.scrollTop = combatLog.scrollHeight;
  }
  
  // Función para actualizar barras de salud
  function updateHealthBars() {
    const playerHealthPercent = (player.health.current / player.health.max) * 100;
    const enemyHealthPercent = (enemy.health.current / enemy.health.max) * 100;
    
    playerHealthBar.style.width = `${Math.max(0, playerHealthPercent)}%`;
    playerHealthText.textContent = `${Math.max(0, player.health.current)}/${player.health.max}`;
    
    enemyHealthBar.style.width = `${Math.max(0, enemyHealthPercent)}%`;
    enemyHealthText.textContent = `${Math.max(0, enemy.health.current)}/${enemy.health.max}`;
  }
  
  // Función para calcular daño
  function calculateDamage(attackStat, defenseStat) {
    const baseDamage = attackStat * 2;
    const damageReduction = defenseStat * 0.5;
    const finalDamage = Math.max(1, Math.floor(baseDamage - damageReduction));
    
    // Añadir variación aleatoria (±20%)
    const variation = (Math.random() * 0.4) - 0.2; // Entre -0.2 y 0.2
    return Math.max(1, Math.floor(finalDamage * (1 + variation)));
  }
  
  // Función para ataque del enemigo
  function enemyAttack() {
    // Calcular daño del enemigo
    const enemyAttackPower = enemy.level * 2;
    const damage = calculateDamage(enemyAttackPower, player.stats.defense);
    
    // Aplicar daño al jugador
    player.health.current = Math.max(0, player.health.current - damage);
    combatStats.damageReceived += damage;
    
    // Actualizar UI
    updateHealthBars();
    
    // Mostrar mensaje
    addLogMessage(`${enemy.type} te ataca y causa ${damage} puntos de daño.`, 'enemy-attack');
    
    // Verificar si el jugador ha sido derrotado
    if (player.health.current <= 0) {
      // Mostrar mensaje de derrota
      addLogMessage(`¡Has sido derrotado por ${enemy.type}!`, 'system');
      
      // Actualizar resultado del combate
      combatStats.result = 'loss';
      
      // Deshabilitar botones
      attackBtn.disabled = true;
      if (skillsBtn) skillsBtn.disabled = true;
      if (itemsBtn) itemsBtn.disabled = true;
      fleeBtn.disabled = true;
      
      // Mostrar modal de derrota después de un breve retraso
      setTimeout(() => {
        defeatModal.classList.remove('hidden');
      }, 1000);
      
      // Enviar estadísticas de combate al servidor
      sendCombatStats();
    }
  }
  
  // Función para ataque del jugador
  function playerAttack() {
    // Calcular daño del jugador
    const damage = calculateDamage(player.stats.strength, enemy.level);
    
    // Verificar crítico (10% de probabilidad)
    const isCritical = Math.random() < 0.1;
    const finalDamage = isCritical ? Math.floor(damage * 1.5) : damage;
    
    // Registrar crítico si ocurrió
    if (isCritical) {
      combatStats.criticalHits++;
    }
    
    // Aplicar daño al enemigo
    enemy.health.current = Math.max(0, enemy.health.current - finalDamage);
    combatStats.damageDone += finalDamage;
    
    // Actualizar UI
    updateHealthBars();
    
    // Mostrar mensaje
    if (isCritical) {
      addLogMessage(`¡Golpe crítico! Atacas y causas ${finalDamage} puntos de daño.`, 'critical');
    } else {
      addLogMessage(`Atacas y causas ${finalDamage} puntos de daño.`, 'player-attack');
    }
    
    // Verificar si el enemigo ha sido derrotado
    if (enemy.health.current <= 0) {
      // Mostrar mensaje de victoria
      addLogMessage(`¡Has derrotado a ${enemy.type}!`, 'system');
      
      // Actualizar resultado del combate
      combatStats.result = 'win';
      combatStats.roundsCompleted++;
      
      // Deshabilitar botones
      attackBtn.disabled = true;
      if (skillsBtn) skillsBtn.disabled = true;
      if (itemsBtn) itemsBtn.disabled = true;
      fleeBtn.disabled = true;
      
      // Enviar estadísticas de combate al servidor
      sendCombatStats();
      
      // Mostrar modal de victoria después de un breve retraso
      setTimeout(() => {
        victoryModal.classList.remove('hidden');
      }, 1000);
      
      return true;
    }
    
    // Si el enemigo sigue vivo, contraataca
    combatStats.roundsCompleted++;
    setTimeout(enemyAttack, 1000);
    
    return false;
  }
  
  // Función para enviar estadísticas de combate al servidor
  async function sendCombatStats() {
    try {
      // Preparar datos para enviar
      const combatData = {
        result: combatStats.result,
        damageDone: combatStats.damageDone,
        damageReceived: combatStats.damageReceived,
        criticalHits: combatStats.criticalHits,
        rounds: combatStats.roundsCompleted,
        enemyType: combatStats.enemyType,
        rewards: {
          experience: <%= currentStage?.challengeData?.rewards?.experience || 0 %>,
          currency: <%= currentStage?.challengeData?.rewards?.currency || 0 %>
        }
      };
      
      // Solo enviar si hay un resultado (victoria o derrota)
      if (combatStats.result) {
        const response = await fetch('/servers/<%= guild.id %>/character/combat-stats', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(combatData)
        });
        
        const data = await response.json();
        console.log('Estadísticas de combate enviadas:', data);
      }
    } catch (error) {
      console.error('Error al enviar estadísticas de combate:', error);
    }
  }
  
  // Event Listeners
  attackBtn.addEventListener('click', function() {
    playerAttack();
  });
  
  fleeBtn.addEventListener('click', function() {
    // 50% de probabilidad de escapar con éxito
    const escapeSuccess = Math.random() < 0.5;
    
    if (escapeSuccess) {
      addLogMessage('¡Has escapado con éxito!', 'system');
      combatStats.result = 'flee';
      
      // Deshabilitar botones
      attackBtn.disabled = true;
      if (skillsBtn) skillsBtn.disabled = true;
      if (itemsBtn) itemsBtn.disabled = true;
      fleeBtn.disabled = true;
      
      // Enviar estadísticas de combate al servidor
      sendCombatStats();
      
      // Redireccionar después de un breve retraso
      setTimeout(() => {
        window.location.href = `/servers/<%= guild.id %>/missions/<%= mission._id %>/progress`;
      }, 1500);
    } else {
      addLogMessage('¡Intento de escape fallido!', 'system');
      // El enemigo ataca como penalización
      enemyAttack();
    }
  });
  
  // Modales de habilidades e items
  if (skillsBtn) {
    skillsBtn.addEventListener('click', function() {
      skillsModal.classList.remove('hidden');
    });
    
    closeSkillsModal.addEventListener('click', function() {
      skillsModal.classList.add('hidden');
    });
    
    // Event listeners para botones de habilidades
    document.querySelectorAll('.skill-btn').forEach(button => {
      button.addEventListener('click', async function() {
        const skillId = this.dataset.skillId;
        skillsModal.classList.add('hidden');
        
        try {
          // Llamar al servidor para usar la habilidad
          const response = await fetch(`/servers/<%= guild.id %>/skills/use/${skillId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ targetId: 'enemy' })
          });
          
          const result = await response.json();
          
          if (result.success) {
            // Aplicar efectos de la habilidad
            if (result.effects.damage > 0) {
              // Aplicar daño al enemigo
              enemy.health.current = Math.max(0, enemy.health.current - result.effects.damage);
              combatStats.damageDone += result.effects.damage;
              updateHealthBars();
              
              addLogMessage(`¡Usas ${result.skill.name} y causas ${result.effects.damage} puntos de daño!`, 'critical');
              
              // Verificar si el enemigo ha sido derrotado
              if (enemy.health.current <= 0) {
                addLogMessage(`¡Has derrotado a ${enemy.type}!`, 'system');
                combatStats.result = 'win';
                
                // Enviar estadísticas de combate al servidor
                sendCombatStats();
                
                setTimeout(() => {
                  victoryModal.classList.remove('hidden');
                }, 1000);
              } else {
                // Si el enemigo sigue vivo, contraataca
                setTimeout(enemyAttack, 1000);
              }
            }
            
            // Aplicar curación si la habilidad lo tiene
            if (result.effects.healing > 0) {
              player.health.current = Math.min(player.health.max, player.health.current + result.effects.healing);
              updateHealthBars();
              
              addLogMessage(`¡Te curas ${result.effects.healing} puntos de salud!`, 'heal');
              
              // El enemigo ataca después
              setTimeout(enemyAttack, 1000);
            }
            
            // Actualizar las estadísticas del jugador si cambiaron
            if (result.character) {
              player.health.current = result.character.health.current;
              player.health.max = result.character.health.max;
              updateHealthBars();
            }
          } else {
            // Mostrar error
            addLogMessage(`Error al usar habilidad: ${result.error}`, 'system');
          }
        } catch (error) {
          console.error('Error al usar habilidad:', error);
          addLogMessage('Error al usar habilidad', 'system');
        }
      });
    });
  }
  
  if (itemsBtn) {
    itemsBtn.addEventListener('click', function() {
      itemsModal.classList.remove('hidden');
    });
    
    closeItemsModal.addEventListener('click', function() {
      itemsModal.classList.add('hidden');
    });
    
    // Event listeners para botones de items
    document.querySelectorAll('.item-btn').forEach(button => {
      button.addEventListener('click', async function() {
        const itemId = this.dataset.itemId;
        itemsModal.classList.add('hidden');
        
        try {
          // Llamar al servidor para usar el item
          const response = await fetch(`/servers/<%= guild.id %>/inventory/use/${itemId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          const result = await response.json();
          
          if (result.success) {
            // Aplicar efectos del item
            if (result.effects.healthRestored > 0) {
              // Aplicar curación
              player.health.current = Math.min(player.health.max, player.health.current + result.effects.healthRestored);
              updateHealthBars();
              
              addLogMessage(`¡Usas ${result.item.name} y recuperas ${result.effects.healthRestored} puntos de salud!`, 'heal');
            }
            
            // Actualizar las estadísticas del jugador si cambiaron
            if (result.character) {
              player.health.current = result.character.health.current;
              player.health.max = result.character.health.max;
              updateHealthBars();
            }
            
            // El enemigo ataca después de usar un item
            setTimeout(enemyAttack, 1000);
          } else {
            // Mostrar error
            addLogMessage(`Error al usar item: ${result.error}`, 'system');
          }
        } catch (error) {
          console.error('Error al usar item:', error);
          addLogMessage('Error al usar item', 'system');
        }
      });
    });
  }
  
  // Al hacer clic fuera de los modales, cerrarlos
  window.addEventListener('click', function(event) {
    if (event.target === skillsModal) {
      skillsModal.classList.add('hidden');
    }
    if (event.target === itemsModal) {
      itemsModal.classList.add('hidden');
    }
  });
  
  // Mensaje inicial
  addLogMessage(`¡Te enfrentas a ${enemy.type} nivel ${enemy.level}!`, 'system');
});
</script>

<%- include('../partials/footer') %>